M Model => C# classes that you use for your Views
V View
C => Controller


 Entity User => class 
 Id
 FirstName
 LastName
 Password
 Salt
 Email


 Account Info in the View UserInfoModel class
 FirstName
 LastName
 
 Repositories => Data Access Logic
 
 Services => 
			Business Logic => 
			Create Shipping Label
			Calcualte Tax
			Register User with Password Hashing
			Send Confirmation Email
			
			Purchase Movie 
				Call the PurcahseRepository Class (Save the Purchase info in Purchase table)
				Validate Credit Card => Paypal 3rd party validation
				InvalidCreditCardException
				Send the Email to User about Purchase Conformation
 
 
 Interfaces => 



Http Methods

GET		=>
POST	=>
PUT		=> 	
DELETE	=>


Code Maintenable
Unit Testing
Change the implemtation at run time

Reusable => Class Library Project

// Hard Dependency
// * Loose * 

Dependency Injection 


tightly coupled code

code through interfaces rather than classes

class A {

   interface B
  
}

Class C {

interface B
}


SHippingCOntroller {

public IactionResult () {

ICarrieService
}

}



interface ICarrieService {

 CreateShippingLabel();
 
}

FedexService : ICarrieService {
 CreateShippingLabel() {
 return "fdsfdsfdsf"
 }
}

UPSService : ICarrieService {
 CreateShippingLabel() {
 return "fdsfdsfdsf"
 }
}

USPSService : ICarrieService {
 CreateShippingLabel() {
 return "fdsfdsfdsf"
 }
}



loosley coulpled code



new features, 
Fixing exisrtng bugs
Code Maintenable  

Design Pattern

method(int x,  IMovieService service);
method(5, new MovieService() );

IMovieService service = new MovieRepository();

COnstructor Injection


HomeController controller = new HomeController(new Logger(), new MovieService() );
controller.Index();

Entity Framework


1.  ADO.NET Lower Level API's for accessing databases
	write lots of code 
	Manual and repeated Code

2.  ORM => Object Ralational Mapping
	micro ORM Dapper => StackOverflow (ASP.NET Core)
	Database already
		
3.	Entity Framework Microsoft
	Full ORM
	Create the database with just C# Code
	Can access the database without single line of SQL Code, using C# and LINQ
	Save/Update/Delete

EF Core

Step 1. Create Entity class that you need with all the properties that matches with columns of the table
	 2. Download the EF Core Packages from Nuget in the solution Microsoft.EntityFrameworkCore.SqlServer
	 3. Establish the connection string (appsettings.json) of where you want to create the database
	 4. Create DbContext -> Represents your Database
		and DbSet => Represents your Tables properties
	 5. Inject COnnection String in to DbContext from your Startup Project, using DI