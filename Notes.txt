M Model => C# classes that you use for your Views
V View
C => Controller


 Entity User => class 
 Id
 FirstName
 LastName
 Password
 Salt
 Email


 Account Info in the View UserInfoModel class
 FirstName
 LastName
 
 Repositories => Data Access Logic
 
 Services => 
			Business Logic => 
			Create Shipping Label
			Calcualte Tax
			Register User with Password Hashing
			Send Confirmation Email
			
			Purchase Movie 
				Call the PurcahseRepository Class (Save the Purchase info in Purchase table)
				Validate Credit Card => Paypal 3rd party validation
				InvalidCreditCardException
				Send the Email to User about Purchase Conformation
 
 
 Interfaces => 



Http Methods

GET		=>
POST	=>
PUT		=> 	
DELETE	=>


Code Maintenable
Unit Testing
Change the implemtation at run time

Reusable => Class Library Project

// Hard Dependency
// * Loose * 

Dependency Injection 


tightly coupled code

code through interfaces rather than classes

class A {

   interface B
  
}

Class C {

interface B
}


SHippingCOntroller {

public IactionResult () {

ICarrieService
}

}



interface ICarrieService {

 CreateShippingLabel();
 
}

FedexService : ICarrieService {
 CreateShippingLabel() {
 return "fdsfdsfdsf"
 }
}

UPSService : ICarrieService {
 CreateShippingLabel() {
 return "fdsfdsfdsf"
 }
}

USPSService : ICarrieService {
 CreateShippingLabel() {
 return "fdsfdsfdsf"
 }
}



loosley coulpled code



new features, 
Fixing exisrtng bugs
Code Maintenable  

Design Pattern

method(int x,  IMovieService service);
method(5, new MovieService() );

IMovieService service = new MovieRepository();

COnstructor Injection


HomeController controller = new HomeController(new Logger(), new MovieService() );

controller.Index();